apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "purpur.fullname" . }}
  labels:
    {{- include "purpur.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit | default 3 }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "purpur.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "purpur.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        checksum/configs: {{ include (print $.Template.BasePath "/configs-cm.yaml") . | sha256sum }}
        checksum/plugins: {{ include (print $.Template.BasePath "/plugins-config.yaml") . | sha256sum }}
    spec:
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      securityContext:
        runAsNonRoot: false
        fsGroup: 10001
      initContainers:
        - name: sync-plugins
          image: alpine:3.19
          env:
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github-access-token
                  key: token
                  optional: true
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -e
              apk add --no-cache curl wget yq jq >/dev/null 2>&1
              
              mkdir -p /data/plugins
              PLUGINS_CONFIG="/config/plugins.yaml"
              
              if [ ! -f "$PLUGINS_CONFIG" ]; then
                echo "plugins.yaml not found, skipping"
                exit 0
              fi
              
              echo "=== Syncing plugins from $PLUGINS_CONFIG ==="
              
              download_file() {
                URL="$1"; OUT="$2"
                echo "→ Downloading: $URL"
                rm -f "$OUT" 2>/dev/null || true
                if [ -n "$GITHUB_TOKEN" ]; then
                  curl -fsSL -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/octet-stream" -o "$OUT" "$URL" || { echo "✗ Failed: $URL"; return 1; }
                else
                  curl -fsSL -o "$OUT" "$URL" || { echo "✗ Failed: $URL"; return 1; }
                fi
                if [ -f "$OUT" ] && [ -s "$OUT" ]; then
                  echo "✓ Saved: $OUT"
                else
                  echo "✗ Empty file: $OUT"
                  return 1
                fi
              }
              
              COUNT=$(yq '.plugins | length' "$PLUGINS_CONFIG")
              echo "Found $COUNT plugins in config"
              
              EXPECTED_PLUGINS=""
              i=0
              while [ "$i" -lt "$COUNT" ]; do
                NAME=$(yq -r ".plugins[$i].name" "$PLUGINS_CONFIG")
                EXPECTED_PLUGINS="$EXPECTED_PLUGINS${NAME}.jar "
                i=$((i+1))
              done
              
              echo "=== Cleaning up old plugins ==="
              for jar in /data/plugins/*.jar; do
                if [ -f "$jar" ]; then
                  BASENAME=$(basename "$jar")
                  if ! echo "$EXPECTED_PLUGINS" | grep -q "$BASENAME"; then
                    echo "✗ Removing: $BASENAME (not in plugins.yaml)"
                    rm -f "$jar"
                  fi
                fi
              done
              
              echo "=== Downloading plugins ==="
              i=0
              while [ "$i" -lt "$COUNT" ]; do
                NAME=$(yq -r ".plugins[$i].name" "$PLUGINS_CONFIG")
                TYPE=$(yq -r ".plugins[$i].type" "$PLUGINS_CONFIG")
                
                echo "[$i] Processing: $NAME (type: $TYPE)"
                
                if [ "$TYPE" = "github" ]; then
                  REPO=$(yq -r ".plugins[$i].repository" "$PLUGINS_CONFIG")
                  VERSION=$(yq -r ".plugins[$i].version" "$PLUGINS_CONFIG")
                  ARTIFACT=$(yq -r ".plugins[$i].artifact" "$PLUGINS_CONFIG")
                  
                  if [ "$VERSION" = "latest" ]; then
                    RELEASE_URL="https://api.github.com/repos/$REPO/releases/latest"
                  else
                    RELEASE_URL="https://api.github.com/repos/$REPO/releases/tags/$VERSION"
                  fi
                  
                  if [ -n "$GITHUB_TOKEN" ]; then
                    API_RESPONSE=$(curl -fsSL -H "Authorization: token $GITHUB_TOKEN" "$RELEASE_URL")
                  else
                    API_RESPONSE=$(curl -fsSL "$RELEASE_URL")
                  fi
                  
                  ASSET_ID=$(echo "$API_RESPONSE" | jq -r ".assets[] | select(.name | contains(\"$ARTIFACT\")) | .id" | head -n 1)
                  
                  if [ -n "$ASSET_ID" ] && [ "$ASSET_ID" != "null" ]; then
                    API_DOWNLOAD_URL="https://api.github.com/repos/$REPO/releases/assets/$ASSET_ID"
                    download_file "$API_DOWNLOAD_URL" "/data/plugins/${NAME}.jar" || echo "Failed to download $NAME"
                  else
                    echo "✗ Asset not found: $ARTIFACT in $REPO@$VERSION"
                  fi
                  
                elif [ "$TYPE" = "url" ]; then
                  URL=$(yq -r ".plugins[$i].url" "$PLUGINS_CONFIG")
                  download_file "$URL" "/data/plugins/${NAME}.jar" || echo "Failed to download $NAME"
                fi
                
                i=$((i+1))
              done
              
              echo "=== Plugin sync completed ==="
              ls -lh /data/plugins/
          volumeMounts:
            - name: world
              mountPath: /data
            - name: plugins-config
              mountPath: /config
        - name: copy-configs
          image: alpine:3.19
          command: ["/bin/sh", "-c"]
          args:
            - |
              apk add --no-cache yq >/dev/null 2>&1
              echo "=== Applying configs from mapping ==="
              
              MAP="/mapping/mapping.yaml"
              if [ ! -f "$MAP" ]; then
                echo "configs-map.yaml not found, skipping"
                exit 0
              fi
              
              yq -r '.configs | to_entries | .[] | .key + " " + .value' "$MAP" | while read TARGET SOURCE; do
                if [ -f "/configs/$SOURCE" ]; then
                  mkdir -p "/data/$(dirname $TARGET)"
                  cp "/configs/$SOURCE" "/data/$TARGET"
                  echo "✓ Copied $SOURCE -> /data/$TARGET"
                else
                  echo "✗ Source not found: $SOURCE"
                fi
              done
              
              echo "Config files applied"
          volumeMounts:
            - name: world
              mountPath: /data
            - name: configs
              mountPath: /configs
            - name: configs-map
              mountPath: /mapping
      containers:
        - name: purpur
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "{{ .Values.jvm.opts }}"
            - name: EULA
              value: "TRUE"
            - name: TYPE
              value: "PURPUR"
            - name: VERSION
              value: "{{ .Values.version }}"
          ports:
            - name: mc
              containerPort: 25565
              protocol: TCP
            - name: health
              containerPort: {{ .Values.health.port }}
              protocol: TCP
          volumeMounts:
            - name: world
              mountPath: /data
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    echo "save-all" | nc -w 5 localhost 25565 || true
                    sleep 5
                    echo "stop" | nc -w 5 localhost 25565 || true
                    sleep 10
          readinessProbe:
            tcpSocket:
              port: 25565
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          livenessProbe:
            tcpSocket:
              port: 25565
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
        - name: world
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "purpur.fullname" . }}-data
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: configs
          configMap:
            name: {{ include "purpur.fullname" . }}-configs
        - name: configs-map
          configMap:
            name: {{ include "purpur.fullname" . }}-configs-map
        - name: plugins-config
          configMap:
            name: {{ include "purpur.fullname" . }}-plugins

